Index: src/app/book/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { CalendarIcon, ClockIcon, UsersIcon, CheckCircle, Loader2 } from \"lucide-react\"\nimport { format, parse, isSameDay } from \"date-fns\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {tableService} from \"@/lib/table_service\";\nimport {reservationService} from \"@/lib/reservation_service\";\nimport {Table} from \"@/lib/types\";\n\n\n\nexport default function IntegratedCustomerBooking() {\n    const [tables, setTables] = useState<Table[]>([])\n    const [filteredTables, setFilteredTables] = useState<Table[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [bookingComplete, setBookingComplete] = useState(false)\n    const [date, setDate] = useState<Date | undefined>(undefined)\n    const [availableDates, setAvailableDates] = useState<Date[]>([])\n    const [availableTimes, setAvailableTimes] = useState<string[]>([])\n    const [selectedTable, setSelectedTable] = useState<number | null>(null)\n    const [guests, setGuests] = useState<number | null>(null)\n    const [selectedTime, setSelectedTime] = useState<string | null>(null)\n\n    useEffect(() => {\n        fetchTables()\n    }, [])\n\n    useEffect(() => {\n        if (guests) {\n            const filtered = tables.filter(table => table.capacity >= guests)\n            setFilteredTables(filtered)\n            setAvailableDates(getAvailableDates(filtered))\n        } else {\n            setFilteredTables([])\n            setAvailableDates([])\n        }\n        setDate(undefined)\n        setAvailableTimes([])\n        setSelectedTable(null)\n        setSelectedTime(null)\n    }, [guests, tables])\n\n    const fetchTables = async () => {\n        setIsLoading(true)\n        try {\n            const fetchedTables = await tableService.getTables()\n            setTables(fetchedTables)\n        } catch (error) {\n            toast.error(\"Failed to fetch tables\")\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    const getAvailableDates = (tables: Table[]) => {\n        const dates = new Set<string>()\n        tables.forEach(table => {\n            table.availability.forEach(slot => {\n                if (Object.values(slot.times).some(available => available)) {\n                    dates.add(slot.date)\n                }\n            })\n        })\n        return Array.from(dates).map(dateString => parse(dateString, 'yyyy-MM-dd', new Date()))\n    }\n\n    const handleDateChange = (newDate: Date | undefined) => {\n        setDate(newDate)\n        setSelectedTable(null)\n        setSelectedTime(null)\n        if (newDate) {\n            const formattedDate = format(newDate, 'yyyy-MM-dd')\n            const times = new Set<string>()\n            filteredTables.forEach(table => {\n                const dateSlot = table.availability.find(slot => slot.date === formattedDate)\n                if (dateSlot) {\n                    Object.entries(dateSlot.times).forEach(([time, available]) => {\n                        if (available) times.add(time)\n                    })\n                }\n            })\n            setAvailableTimes(Array.from(times).sort())\n        } else {\n            setAvailableTimes([])\n        }\n    }\n\n    const handleTimeChange = (time: string) => {\n        setSelectedTime(time)\n        if (date) {\n            const formattedDate = format(date, 'yyyy-MM-dd')\n            const availableTablesForDateTime = filteredTables.filter(table =>\n                table.availability.some(slot =>\n                    slot.date === formattedDate && slot.times[time]\n                )\n            )\n            if (availableTablesForDateTime.length > 0) {\n                setSelectedTable(availableTablesForDateTime[0].id)\n            }\n        }\n    }\n\n    const handleGuestsChange = (value: string) => {\n        setGuests(parseInt(value, 10))\n    }\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setIsLoading(true)\n        const formData = new FormData(e.currentTarget)\n        const bookingData = {\n            ...Object.fromEntries(formData),\n            date: date ? format(date, 'yyyy-MM-dd') : '',\n            time: selectedTime,\n            tableId: selectedTable\n        }\n        console.log(bookingData)\n\n        try {\n            await reservationService.createReservation(bookingData)\n            setBookingComplete(true)\n            toast.success(\"Reservation created successfully!\")\n        } catch (error) {\n            toast.error(\"Failed to create reservation\")\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gradient-to-br from-teal-600 to-emerald-700 flex items-center justify-center p-4\">\n            <ToastContainer position=\"top-right\" autoClose={3000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />\n            <AnimatePresence>\n                {!bookingComplete ? (\n                    <motion.div\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, y: -20 }}\n                        transition={{ duration: 0.5 }}\n                        className=\"w-full max-w-md bg-white rounded-lg shadow-xl overflow-hidden\"\n                    >\n                        <div className=\"p-6 bg-teal-700 text-white\">\n                            <h1 className=\"text-2xl md:text-3xl font-bold mb-2\">Book Your Table</h1>\n                            <p className=\"text-teal-100 text-sm md:text-base\">Experience culinary excellence at La Belle Ã‰poque</p>\n                        </div>\n\n                        <form onSubmit={handleSubmit} className=\"space-y-4 p-4 md:p-6\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">Name</Label>\n                                <Input id=\"name\" name=\"name\" required className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-muted-foreground\" />\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">Email</Label>\n                                <Input id=\"email\" name=\"email\" type=\"email\" required className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-muted-foreground\" />\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"guests\" className=\"text-sm font-medium text-gray-700\">Number of Guests</Label>\n                                <div className=\"relative\">\n                                    <UsersIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                                    <Select name=\"guests\" required onValueChange={handleGuestsChange}>\n                                        <SelectTrigger className=\"w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-muted-foreground\">\n                                            <SelectValue placeholder=\"Select number of guests\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            {[1, 2, 3, 4, 5, 6].map(num => (\n                                                <SelectItem key={num} value={num.toString()}>{num}</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"date\" className=\"text-sm font-medium text-gray-700\">Date</Label>\n                                <Popover>\n                                    <PopoverTrigger asChild>\n                                        <Button\n                                            variant=\"outline\"\n                                            className={`w-full justify-start text-left font-normal text-gray-700`}\n                                            disabled={!guests}\n                                        >\n                                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                            {date ? format(date, \"PPP\") : \"Pick a date\"}\n                                        </Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent className=\"w-auto p-0 text-gray-700\" align=\"start\">\n                                        <Calendar\n                                            mode=\"single\"\n                                            selected={date}\n                                            onSelect={handleDateChange}\n                                            disabled={(date) =>\n                                                !availableDates.some(availableDate =>\n                                                    isSameDay(availableDate, date)\n                                                )\n                                            }\n                                            initialFocus\n                                        />\n                                    </PopoverContent>\n                                </Popover>\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"time\" className=\"text-sm font-medium text-gray-700\">Time</Label>\n                                <div className=\"relative\">\n                                    <ClockIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                                    <Select name=\"time\" required onValueChange={handleTimeChange} disabled={!date}>\n                                        <SelectTrigger className={`w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-muted-foreground`}>\n                                            <SelectValue placeholder=\"Select a time\"/>\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            {availableTimes.map(time => (\n                                                <SelectItem key={time} value={time}>{time}</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                            </div>\n\n                            <Button type=\"submit\" className=\"w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-3 px-4 rounded-md transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500\" disabled={isLoading || !selectedTable}>\n                                {isLoading ? (\n                                    <Loader2 className=\"h-5 w-5 animate-spin\" />\n                                ) : (\n                                    \"Confirm Reservation\"\n                                )}\n                            </Button>\n                        </form>\n                    </motion.div>\n                ) : (\n                    <motion.div\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.5 }}\n                        className=\"w-full max-w-md bg-white rounded-lg shadow-xl overflow-hidden text-center p-6 md:p-8\"\n                    >\n                        <CheckCircle className=\"w-12 h-12 md:w-16 md:h-16 text-teal-600 mx-auto mb-4\" />\n                        <h2 className=\"text-xl md:text-2xl font-bold text-gray-800 mb-2\">Booking Confirmed!</h2>\n                        <p className=\"text-gray-600 mb-4 text-sm md:text-base\">Thank you for choosing La Belle Ã‰poque. We look forward to serving you.</p>\n                        <Button onClick={() => {\n                            setBookingComplete(false)\n                            setDate(undefined)\n                            setSelectedTable(null)\n                            setAvailableTimes([])\n                            setGuests(null)\n                            setSelectedTime(null)\n                        }} className=\"bg-teal-600 hover:bg-teal-700 text-white\">\n                            Make Another Reservation\n                        </Button>\n                    </motion.div>\n                )}\n            </AnimatePresence>\n        </div>\n    )\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/book/page.tsx b/src/app/book/page.tsx
--- a/src/app/book/page.tsx	(revision 77c62e7346e0027cb0db5fe90f3be8681af2270a)
+++ b/src/app/book/page.tsx	(date 1727058729037)
@@ -14,7 +14,7 @@
 import 'react-toastify/dist/ReactToastify.css'
 import {tableService} from "@/lib/table_service";
 import {reservationService} from "@/lib/reservation_service";
-import {Table} from "@/lib/types";
+import {Reservation, Table} from "@/lib/types";
 
 
 
@@ -117,13 +117,12 @@
         e.preventDefault()
         setIsLoading(true)
         const formData = new FormData(e.currentTarget)
-        const bookingData = {
+        const bookingData:Reservation = {
             ...Object.fromEntries(formData),
             date: date ? format(date, 'yyyy-MM-dd') : '',
             time: selectedTime,
             tableId: selectedTable
         }
-        console.log(bookingData)
 
         try {
             await reservationService.createReservation(bookingData)
