Index: src/app/restaurant-dashboard/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { PlusIcon, CheckIcon, XIcon, AlertCircle, CalendarIcon, Loader2 } from \"lucide-react\"\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { format} from 'date-fns'\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { tableService } from \"@/lib/table_service\"\nimport { reservationService } from \"@/lib/reservation_service\"\n\ninterface TableAvailability {\n    date: string;\n    times: {\n        [key: string]: boolean;\n    };\n}\n\ninterface Table {\n    id: number;\n    capacity: number;\n    availability: TableAvailability[];\n}\n\ninterface Reservation {\n    id: number;\n    name: string;\n    date: string;\n    time: string;\n    guests: number;\n    tableId: number;\n}\n\nconst timeSlots = [\n    \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\"\n]\n\nexport default function IntegratedRestaurantDashboard() {\n    const [selectedDate, setSelectedDate] = useState<Date>(new Date())\n    const [tables, setTables] = useState<Table[]>([])\n    const [reservations, setReservations] = useState<Reservation[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        fetchTables()\n        fetchReservations()\n    }, [])\n\n    const fetchTables = async () => {\n        try {\n            const fetchedTables = await tableService.getTables()\n            setTables(fetchedTables)\n        } catch (error) {\n            toast.error(\"Failed to fetch tables\")\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    const fetchReservations = async () => {\n        try {\n            const fetchedReservations = await reservationService.getReservations()\n            setReservations(fetchedReservations)\n        } catch (error) {\n            toast.error(\"Failed to fetch reservations\")\n        }\n    }\n\n    const handleAddTable = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const formData = new FormData(e.currentTarget)\n        const capacity = Number(formData.get(\"capacity\"))\n        const newTable: Partial<Table> = {\n            capacity,\n            availability: [\n                {\n                    date: format(selectedDate, 'yyyy-MM-dd'),\n                    times: timeSlots.reduce((acc, slot) => ({ ...acc, [slot]: true }), {})\n                }\n            ]\n        }\n        try {\n            const createdTable = await tableService.createTable(newTable)\n            setTables([...tables, createdTable])\n            toast.success(\"New table added successfully!\")\n        } catch (error) {\n            console.log(error)\n            toast.error(\"Failed to add new table\")\n        }\n    }\n\n    const handleToggleTableAvailability = async (id: number, timeSlot: string) => {\n        const dateString = format(selectedDate, 'yyyy-MM-dd')\n        const table = tables.find(t => t.id === id)\n        if (!table) return\n\n        const availabilityIndex = table.availability.findIndex(a => a.date === dateString)\n        let updatedAvailability: TableAvailability[]\n\n        if (availabilityIndex !== -1) {\n            updatedAvailability = [...table.availability]\n            updatedAvailability[availabilityIndex] = {\n                ...updatedAvailability[availabilityIndex],\n                times: {\n                    ...updatedAvailability[availabilityIndex].times,\n                    [timeSlot]: !updatedAvailability[availabilityIndex].times[timeSlot]\n                }\n            }\n        } else {\n            updatedAvailability = [\n                ...table.availability,\n                {\n                    date: dateString,\n                    times: {\n                        ...timeSlots.reduce((acc, slot) => ({ ...acc, [slot]: true }), {}),\n                        [timeSlot]: false\n                    }\n                }\n            ]\n        }\n\n        try {\n            await tableService.updateTable(id, { ...table, availability: updatedAvailability })\n            setTables(tables.map(t => t.id === id ? { ...t, availability: updatedAvailability } : t))\n            toast.info(`Table ${id} on ${format(selectedDate, 'MMM dd, yyyy')} at ${timeSlot} is now ${updatedAvailability[availabilityIndex]?.times[timeSlot] ? 'available' : 'unavailable'}`)\n        } catch (error) {\n            toast.error(\"Failed to update table availability\")\n        }\n    }\n\n    const getTableAvailability = (table: Table, date: Date, timeSlot: string): boolean => {\n        if (!table.availability || table.availability.length === 0) {\n            return false // Assume available if no data\n        }\n        const dateString = format(date, 'yyyy-MM-dd')\n        const availabilityForDate = table.availability.find(a => a.date === dateString)\n        return availabilityForDate?.times[timeSlot] ?? false // Assume available if no data for the date\n    }\n\n    if (isLoading) {\n        return (\n            <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-teal-600 to-emerald-700\">\n                <Loader2 className=\"w-8 h-8 text-white animate-spin\" />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gradient-to-br from-teal-600 to-emerald-700 p-4 md:p-8\">\n            <ToastContainer position=\"top-right\" autoClose={3000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />\n            <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5 }}\n            >\n                <h1 className=\"text-2xl md:text-4xl font-bold mb-4 md:mb-8 text-white\">La Belle Ã‰poque Dashboard</h1>\n\n                <Tabs defaultValue=\"tables\" className=\"space-y-4\">\n                    <TabsList className=\"bg-white w-full\">\n                        <TabsTrigger value=\"tables\" className=\"flex-1 data-[state=active]:bg-teal-600 data-[state=active]:text-white\">Tables</TabsTrigger>\n                        <TabsTrigger value=\"reservations\" className=\"flex-1 data-[state=active]:bg-teal-600 data-[state=active]:text-white\">Reservations</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"tables\" className=\"space-y-4\">\n                        <Card className=\"bg-white\">\n                            <CardHeader>\n                                <CardTitle className=\"text-teal-800 text-lg md:text-xl\">Add New Table</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <form onSubmit={handleAddTable} className=\"flex flex-col md:flex-row items-end space-y-2 md:space-y-0 md:space-x-2\">\n                                    <div className=\"flex-grow w-full md:w-auto\">\n                                        <Label htmlFor=\"capacity\" className=\"text-sm text-teal-700\">Capacity</Label>\n                                        <Input id=\"capacity\" name=\"capacity\" type=\"number\" placeholder=\"Enter capacity\" min=\"1\" required className=\"bg-gray-100 text-teal-800 border-teal-300\" />\n                                    </div>\n                                    <Button type=\"submit\" className=\"bg-teal-600 hover:bg-teal-700 text-white w-full md:w-auto\">\n                                        <PlusIcon className=\"mr-2 h-4 w-4\" />\n                                        Add Table\n                                    </Button>\n                                </form>\n                            </CardContent>\n                        </Card>\n\n                        <Card className=\"bg-white\">\n                            <CardHeader>\n                                <CardTitle className=\"text-teal-800 text-lg md:text-xl\">Table Management</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"mb-4 space-y-2\">\n                                    <Label htmlFor=\"date\" className=\"text-sm font-medium text-gray-700\">Select Date</Label>\n                                    <Popover>\n                                        <PopoverTrigger asChild>\n                                            <Button\n                                                id=\"date\"\n                                                variant=\"outline\"\n                                                className={`w-full md:w-auto justify-start text-left font-normal`}\n                                            >\n                                                <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                                {format(selectedDate, 'PPP')}\n                                            </Button>\n                                        </PopoverTrigger>\n                                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                            <Calendar\n                                                mode=\"single\"\n                                                selected={selectedDate}\n                                                onSelect={(date) => date && setSelectedDate(date)}\n                                                initialFocus\n                                            />\n                                        </PopoverContent>\n                                    </Popover>\n                                </div>\n                                <div className=\"overflow-x-auto\">\n                                    <Table>\n                                        <TableHeader>\n                                            <TableRow>\n                                                <TableHead className=\"text-teal-700\">ID</TableHead>\n                                                <TableHead className=\"text-teal-700\">Capacity</TableHead>\n                                                {timeSlots.map(slot => (\n                                                    <TableHead key={slot} className=\"text-teal-700\">{slot}</TableHead>\n                                                ))}\n                                            </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                            {tables.map(table => (\n                                                <TableRow key={table.id}>\n                                                    <TableCell className=\"font-medium text-teal-800\">{table.id}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{table.capacity}</TableCell>\n                                                    {timeSlots.map(slot => (\n                                                        <TableCell key={slot}>\n                                                            <Button\n                                                                onClick={() => handleToggleTableAvailability(table.id, slot)}\n                                                                variant=\"outline\"\n                                                                size=\"sm\"\n                                                                className={`${\n                                                                    getTableAvailability(table, selectedDate, slot)\n                                                                        ? \"bg-green-100 hover:bg-green-200 text-green-800\"\n                                                                        : \"bg-red-100 hover:bg-red-200 text-red-800\"\n                                                                }`}\n                                                            >\n                                                                {getTableAvailability(table, selectedDate, slot) ? <CheckIcon className=\"h-4 w-4\" /> : <XIcon className=\"h-4 w-4\" />}\n                                                            </Button>\n                                                        </TableCell>\n                                                    ))}\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n\n                    <TabsContent value=\"reservations\">\n                        <Card className=\"bg-white overflow-x-auto\">\n                            <CardHeader>\n                                <CardTitle className=\"text-teal-800 text-lg md:text-xl\">Current Reservations</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                {reservations.length > 0 ? (\n                                    <Table>\n                                        <TableHeader>\n                                            <TableRow>\n                                                <TableHead className=\"text-teal-700\">ID</TableHead>\n                                                <TableHead className=\"text-teal-700\">Name</TableHead>\n                                                <TableHead className=\"text-teal-700\">Date</TableHead>\n                                                <TableHead className=\"text-teal-700\">Time</TableHead>\n                                                <TableHead className=\"text-teal-700\">Guests</TableHead>\n                                                <TableHead className=\"text-teal-700\">Table</TableHead>\n                                            </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                            {reservations.map(reservation => (\n                                                <TableRow key={reservation.id}>\n                                                    <TableCell className=\"font-medium text-teal-800\">{reservation.id}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{reservation.name}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{reservation.date}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{reservation.time}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{reservation.guests}</TableCell>\n                                                    <TableCell className=\"text-teal-800\">{reservation.tableId}</TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                ) : (\n                                    <div className=\"text-center py-8\">\n                                        <AlertCircle className=\"mx-auto h-12 w-12 text-teal-600 mb-4\" />\n                                        <h3 className=\"text-lg font-semibold mb-2 text-teal-800\">No Reservations Yet</h3>\n                                        <p className=\"text-teal-600\">When customers make reservations, they&apos;ll appear here.</p>\n                                    </div>\n                                )}\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n                </Tabs>\n            </motion.div>\n        </div>\n    )\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/restaurant-dashboard/page.tsx b/src/app/restaurant-dashboard/page.tsx
--- a/src/app/restaurant-dashboard/page.tsx	(revision 583f8800381c5c87af1470ba1c02e37f00fc94a8)
+++ b/src/app/restaurant-dashboard/page.tsx	(date 1727130295854)
@@ -98,51 +98,66 @@
     }
 
     const handleToggleTableAvailability = async (id: number, timeSlot: string) => {
-        const dateString = format(selectedDate, 'yyyy-MM-dd')
-        const table = tables.find(t => t.id === id)
-        if (!table) return
+        const dateString = format(selectedDate, 'yyyy-MM-dd');
+        const table = tables.find(t => t.id === id);
+        if (!table) return;
 
-        const availabilityIndex = table.availability.findIndex(a => a.date === dateString)
-        let updatedAvailability: TableAvailability[]
+        const availabilityIndex = table.availability.findIndex(a => a.date === dateString);
+        let updatedAvailability: TableAvailability[];
 
         if (availabilityIndex !== -1) {
-            updatedAvailability = [...table.availability]
+            // Clone the availability array to ensure immutability
+            updatedAvailability = [...table.availability];
+
+            // Update the specific date's timeslot availability
             updatedAvailability[availabilityIndex] = {
                 ...updatedAvailability[availabilityIndex],
                 times: {
                     ...updatedAvailability[availabilityIndex].times,
                     [timeSlot]: !updatedAvailability[availabilityIndex].times[timeSlot]
                 }
-            }
+            };
         } else {
+            // Create new availability entry for the new date
             updatedAvailability = [
                 ...table.availability,
                 {
                     date: dateString,
                     times: {
+                        // Initialize all timeSlots as true and then toggle the specific timeSlot
                         ...timeSlots.reduce((acc, slot) => ({ ...acc, [slot]: true }), {}),
                         [timeSlot]: false
                     }
                 }
-            ]
+            ];
         }
 
         try {
-            await tableService.updateTable(id, { ...table, availability: updatedAvailability })
-            setTables(tables.map(t => t.id === id ? { ...t, availability: updatedAvailability } : t))
-            toast.info(`Table ${id} on ${format(selectedDate, 'MMM dd, yyyy')} at ${timeSlot} is now ${updatedAvailability[availabilityIndex]?.times[timeSlot] ? 'available' : 'unavailable'}`)
+            // Update the table availability via the service
+            await tableService.updateTable(id, { ...table, availability: updatedAvailability });
+
+            // Update the state with the new availability for this specific table
+            setTables(tables.map(t =>
+                t.id === id
+                    ? { ...t, availability: updatedAvailability }
+                    : t // Make sure other tables remain unchanged
+            ));
+
+            const toggledTimeSlot = updatedAvailability[availabilityIndex]?.times[timeSlot];
+            toast.info(`Table ${id} on ${format(selectedDate, 'MMM dd, yyyy')} at ${timeSlot} is now ${toggledTimeSlot ? 'available' : 'unavailable'}`);
         } catch (error) {
-            toast.error("Failed to update table availability")
+            toast.error("Failed to update table availability");
         }
+
     }
 
     const getTableAvailability = (table: Table, date: Date, timeSlot: string): boolean => {
         if (!table.availability || table.availability.length === 0) {
-            return false // Assume available if no data
+            return false
         }
         const dateString = format(date, 'yyyy-MM-dd')
         const availabilityForDate = table.availability.find(a => a.date === dateString)
-        return availabilityForDate?.times[timeSlot] ?? false // Assume available if no data for the date
+        return availabilityForDate?.times[timeSlot] ?? false
     }
 
     if (isLoading) {
